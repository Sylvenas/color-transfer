{"code":"import { formatHSLAToNum } from '../utils';\r\nimport { HSL_REG, HSLA_REG } from '../utils/reg';\r\nimport { isNumeric } from '../utils/type-check';\r\n/**\r\n * HSL to RGB\r\n * @example\r\n * (h,s%,l%) => rgb(r,g,b)\r\n * (h,s%,l%,a) => rgb(r,g,b,a)\r\n * hsl(h,s%,l%) => rgb(r,g,b)\r\n * hsla(h,s%,l%,a) => rgb(r,g,b,a)\r\n * hsl(h s% l%) => rgb(r,g,b)\r\n * hsla(h s% l% a) => rgb(r,g,b,a)\r\n * hsl(hdeg,s%,l%) => rgb(r,g,b)\r\n * hsl(hrad,s%,l%) => rgb(r,g,b)\r\n * hsl(hturn,s%,l%) => rgb(r,g,b)\r\n *\r\n * @param h hue number or hsl[a] string\r\n * @param s saturation number\r\n * @param l lightness number\r\n * @param a alpha number\r\n *\r\n * @returns 'rgb[a]' string\r\n */\r\nfunction HSLToRGB(h, s, l, a) {\r\n    var hue, saturation, lightness, alpha;\r\n    if (typeof h === 'number') {\r\n        if (!isNumeric(h, s, l, a ? a : 1))\r\n            throw new Error(\"Invalid input HSL[A] color\");\r\n        // Must be fractions of 1\r\n        hue = h;\r\n        saturation = s / 100;\r\n        lightness = l / 100;\r\n        if (a && typeof a === 'number')\r\n            alpha = a;\r\n    }\r\n    else if (typeof h === 'string') {\r\n        if (!(HSL_REG.test(h) || HSLA_REG.test(h)))\r\n            throw new Error(\"Invalid input HSL[A] color\");\r\n        var hsla = formatHSLAToNum(h);\r\n        hue = hsla.hue;\r\n        saturation = hsla.saturation;\r\n        lightness = hsla.lightness;\r\n        if (hsla.alpha != null) {\r\n            alpha = hsla.alpha;\r\n        }\r\n    }\r\n    var primary = (1 - Math.abs(2 * lightness - 1)) * saturation, secondary = primary * (1 - Math.abs((hue / 60) % 2 - 1)), middle = lightness - primary / 2, red = 0, green = 0, blue = 0;\r\n    if (0 <= hue && hue < 60) {\r\n        red = primary;\r\n        green = secondary;\r\n        blue = 0;\r\n    }\r\n    else if (60 <= hue && hue < 120) {\r\n        red = secondary;\r\n        green = primary;\r\n        blue = 0;\r\n    }\r\n    else if (120 <= hue && hue < 180) {\r\n        red = 0;\r\n        green = primary;\r\n        blue = secondary;\r\n    }\r\n    else if (180 <= hue && hue < 240) {\r\n        red = 0;\r\n        green = secondary;\r\n        blue = primary;\r\n    }\r\n    else if (240 <= hue && hue < 300) {\r\n        red = secondary;\r\n        green = 0;\r\n        blue = primary;\r\n    }\r\n    else if (300 <= hue && hue < 360) {\r\n        red = primary;\r\n        green = 0;\r\n        blue = secondary;\r\n    }\r\n    red = Math.round((red + middle) * 255);\r\n    green = Math.round((green + middle) * 255);\r\n    blue = Math.round((blue + middle) * 255);\r\n    if (alpha) {\r\n        return [red, green, blue, alpha];\r\n    }\r\n    return [red, green, blue];\r\n}\r\nexport default HSLToRGB;\r\n","references":["/Users/sylvenas/Documents/github/color-transfer/src/utils/index.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/reg.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/type-check.ts"],"dts":{"name":"/Users/sylvenas/Documents/github/color-transfer/node_modules/.cache/rollup-plugin-typescript2/placeholder/HSL/HSLToRGB.d.ts","writeByteOrderMark":false,"text":"/**\r\n * HSL to RGB\r\n * @example\r\n * (h,s%,l%) => rgb(r,g,b)\r\n * (h,s%,l%,a) => rgb(r,g,b,a)\r\n * hsl(h,s%,l%) => rgb(r,g,b)\r\n * hsla(h,s%,l%,a) => rgb(r,g,b,a)\r\n * hsl(h s% l%) => rgb(r,g,b)\r\n * hsla(h s% l% a) => rgb(r,g,b,a)\r\n * hsl(hdeg,s%,l%) => rgb(r,g,b)\r\n * hsl(hrad,s%,l%) => rgb(r,g,b)\r\n * hsl(hturn,s%,l%) => rgb(r,g,b)\r\n *\r\n * @param h hue number or hsl[a] string\r\n * @param s saturation number\r\n * @param l lightness number\r\n * @param a alpha number\r\n *\r\n * @returns 'rgb[a]' string\r\n */\r\ndeclare function HSLToRGB(h: number | string, s?: number, l?: number, a?: number): Array<number>;\r\nexport default HSLToRGB;\r\n"}}
