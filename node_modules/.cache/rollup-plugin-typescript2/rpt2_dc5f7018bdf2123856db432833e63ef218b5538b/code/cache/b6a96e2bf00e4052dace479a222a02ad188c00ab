{"code":"import { formatRGBAToNum } from '../utils';\r\nimport { RGB_REG, RGBA_REG } from '../utils/reg';\r\nimport { isNumeric } from '../utils/type-check';\r\n/**\r\n * RGB to HEX\r\n *\r\n * @example\r\n * (r,g,b) => #rrggbb\r\n * (r,g,b,a) => #rrggbbaa\r\n *\r\n * rgb(rgb) => #rrggbb\r\n * rgba(r,g,b,a) => #rrggbbaa\r\n *\r\n * rgb(r g b) => #rrggbb\r\n * rgba(r g b a) => #rrggbbaa\r\n *\r\n * @param r red number or rgb[a] string\r\n * @param g green number\r\n * @param b blue number\r\n *\r\n * @returns HEX string\r\n */\r\nfunction RGBToHex(r, g, b, a) {\r\n    var red, green, blue, alpha;\r\n    if (typeof r === 'number') {\r\n        if (!isNumeric(r, g, b, a ? a : 1))\r\n            throw new Error(\"Invalid input RGB[A] color\");\r\n        red = r.toString(16);\r\n        green = g.toString(16);\r\n        blue = b.toString(16);\r\n        if (a) {\r\n            alpha = Math.round(a * 255).toString(16);\r\n        }\r\n    }\r\n    else if (typeof r === 'string') {\r\n        if (!(RGB_REG.test(r) || RGBA_REG.test(r)))\r\n            throw new Error(\"Invalid input RGB[A] color\");\r\n        var rgba = formatRGBAToNum(r);\r\n        red = rgba.red.toString(16);\r\n        green = rgba.green.toString(16);\r\n        blue = rgba.blue.toString(16);\r\n        if (rgba.alpha != null)\r\n            alpha = rgba.alpha.toString(16);\r\n    }\r\n    if (red.length == 1)\r\n        red = \"0\" + red;\r\n    if (green.length == 1)\r\n        green = \"0\" + green;\r\n    if (blue.length == 1)\r\n        blue = \"0\" + blue;\r\n    if (alpha && alpha.length == 1)\r\n        alpha = \"0\" + alpha;\r\n    if (alpha) {\r\n        return [red, green, blue, alpha];\r\n    }\r\n    return [red, green, blue];\r\n}\r\nexport default RGBToHex;\r\n","references":["/Users/sylvenas/Documents/github/color-transfer/src/utils/index.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/reg.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/type-check.ts"],"dts":{"name":"/Users/sylvenas/Documents/github/color-transfer/node_modules/.cache/rollup-plugin-typescript2/placeholder/RGB/RGBToHEX.d.ts","writeByteOrderMark":false,"text":"/**\r\n * RGB to HEX\r\n *\r\n * @example\r\n * (r,g,b) => #rrggbb\r\n * (r,g,b,a) => #rrggbbaa\r\n *\r\n * rgb(rgb) => #rrggbb\r\n * rgba(r,g,b,a) => #rrggbbaa\r\n *\r\n * rgb(r g b) => #rrggbb\r\n * rgba(r g b a) => #rrggbbaa\r\n *\r\n * @param r red number or rgb[a] string\r\n * @param g green number\r\n * @param b blue number\r\n *\r\n * @returns HEX string\r\n */\r\ndeclare function RGBToHex(r: number | string, g?: number, b?: number, a?: number): Array<string>;\r\nexport default RGBToHex;\r\n"}}
