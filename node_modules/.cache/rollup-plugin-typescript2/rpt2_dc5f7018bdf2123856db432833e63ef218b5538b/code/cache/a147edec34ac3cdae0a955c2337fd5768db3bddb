{"code":"import { HEX_REG, HHEEXX_REG } from '../utils/reg';\r\n/**\r\n * HEX to RGB\r\n *\r\n * @example\r\n * #rgb => rgb(r,g,b)\r\n * #rgba => rgb(r,g,b,a)\r\n * #rrggbb => rgb(r,g,b)\r\n * #rrggbbaa => rgba(r,g,b,a)\r\n *\r\n * @param h hex\r\n *\r\n * @returns RGB string\r\n */\r\nfunction HEXToRGB(h) {\r\n    if (!(HEX_REG.test(h) || HHEEXX_REG.test(h)))\r\n        throw new Error(\"Invalid input HEX color\");\r\n    var red = '0', green = '0', blue = '0', alpha = '1';\r\n    // 3 digits\r\n    if (h.length === 4 || h.length === 5) {\r\n        red = \"0x\" + h[1] + h[1];\r\n        green = \"0x\" + h[2] + h[2];\r\n        blue = \"0x\" + h[3] + h[3];\r\n        // 6 digits\r\n    }\r\n    else if (h.length === 7 || h.length === 9) {\r\n        red = \"0x\" + h[1] + h[2];\r\n        green = \"0x\" + h[3] + h[4];\r\n        blue = \"0x\" + h[5] + h[6];\r\n    }\r\n    if (h.length === 5) {\r\n        alpha = \"0x\" + h[4] + h[4];\r\n        alpha = (+alpha / 255).toFixed(3);\r\n    }\r\n    else if (h.length === 9) {\r\n        alpha = \"0x\" + h[7] + h[8];\r\n        alpha = (+alpha / 255).toFixed(3);\r\n    }\r\n    if (h.length === 4 || h.length === 7) {\r\n        return [+red, +green, +blue];\r\n    }\r\n    else {\r\n        return [+red, +green, +blue, +alpha];\r\n    }\r\n}\r\nexport default HEXToRGB;\r\n","references":["/Users/sylvenas/Documents/github/color-transfer/src/utils/reg.ts"],"dts":{"name":"/Users/sylvenas/Documents/github/color-transfer/node_modules/.cache/rollup-plugin-typescript2/placeholder/HEX/HEXToRGB.d.ts","writeByteOrderMark":false,"text":"/**\r\n * HEX to RGB\r\n *\r\n * @example\r\n * #rgb => rgb(r,g,b)\r\n * #rgba => rgb(r,g,b,a)\r\n * #rrggbb => rgb(r,g,b)\r\n * #rrggbbaa => rgba(r,g,b,a)\r\n *\r\n * @param h hex\r\n *\r\n * @returns RGB string\r\n */\r\ndeclare function HEXToRGB(h: string): Array<number>;\r\nexport default HEXToRGB;\r\n"}}
