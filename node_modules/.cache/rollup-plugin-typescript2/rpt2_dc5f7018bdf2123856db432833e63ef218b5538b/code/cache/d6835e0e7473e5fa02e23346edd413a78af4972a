{"code":"import { formatRGBAToNum } from '../utils';\r\nimport { RGB_REG, RGBA_REG } from '../utils/reg';\r\nimport { isNumeric } from '../utils/type-check';\r\n/**\r\n * RGB to HSL\r\n *\r\n * @example\r\n * (r,g,b) => hsl(h,s%,l%)\r\n * (r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * rgb(r,g,b) => hsl(h,s%,l%)\r\n * rgba(r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * rgb(r,g,b) => hsl(h,s%,l%,a)\r\n * rgba(r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * @param r red number or rgb[a] string\r\n * @param g green number\r\n * @param b blue number\r\n *\r\n * @returns HSL string\r\n */\r\nfunction RGBToHSL(r, g, b, a) {\r\n    var red, green, blue, alpha;\r\n    if (typeof r === 'number') {\r\n        if (!isNumeric(r, g, b, a ? a : 1))\r\n            throw new Error(\"Invalid input RGB[A] color\");\r\n        red = r / 255;\r\n        green = g / 255;\r\n        blue = b / 255;\r\n        if (a && typeof a === 'number')\r\n            alpha = a;\r\n    }\r\n    else if (typeof r === 'string') {\r\n        if (!(RGB_REG.test(r) || RGBA_REG.test(r)))\r\n            throw new Error(\"Invalid input RGB[A] color\");\r\n        var rgba = formatRGBAToNum(r);\r\n        red = rgba.red / 255;\r\n        green = rgba.green / 255;\r\n        blue = rgba.blue / 255;\r\n        if (rgba.alpha != null)\r\n            alpha = +(rgba.alpha / 255).toFixed(1);\r\n    }\r\n    var cmin = Math.min(red, green, blue), cmax = Math.max(red, green, blue), delta = cmax - cmin, h = 0, s = 0, l = 0;\r\n    if (delta === 0)\r\n        h = 0;\r\n    // Red is max\r\n    else if (cmax === red)\r\n        h = ((green - blue) / delta) % 6;\r\n    // Green is max\r\n    else if (cmax === green)\r\n        h = (blue - red) / delta + 2;\r\n    // Blue is max\r\n    else\r\n        h = (red - green) / delta + 4;\r\n    h = Math.round(h * 60);\r\n    // 负值反转360度\r\n    if (h < 0)\r\n        h += 360;\r\n    l = (cmax + cmin) / 2;\r\n    // Calculate saturation\r\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    // Multiply l and s by 100\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n    if (alpha) {\r\n        return [h, s, l, alpha];\r\n    }\r\n    return [h, s, l];\r\n}\r\nexport default RGBToHSL;\r\n","references":["/Users/sylvenas/Documents/github/color-transfer/src/utils/index.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/reg.ts","/Users/sylvenas/Documents/github/color-transfer/src/utils/type-check.ts"],"dts":{"name":"/Users/sylvenas/Documents/github/color-transfer/node_modules/.cache/rollup-plugin-typescript2/placeholder/RGB/RGBToHSL.d.ts","writeByteOrderMark":false,"text":"/**\r\n * RGB to HSL\r\n *\r\n * @example\r\n * (r,g,b) => hsl(h,s%,l%)\r\n * (r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * rgb(r,g,b) => hsl(h,s%,l%)\r\n * rgba(r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * rgb(r,g,b) => hsl(h,s%,l%,a)\r\n * rgba(r,g,b,a) => hsla(h,s%,l%,a)\r\n *\r\n * @param r red number or rgb[a] string\r\n * @param g green number\r\n * @param b blue number\r\n *\r\n * @returns HSL string\r\n */\r\ndeclare function RGBToHSL(r: number | string, g?: number, b?: number, a?: number): Array<number>;\r\nexport default RGBToHSL;\r\n"}}
