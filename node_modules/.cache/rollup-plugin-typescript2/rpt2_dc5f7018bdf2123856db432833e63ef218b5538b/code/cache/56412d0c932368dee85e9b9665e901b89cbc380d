{"code":"/**\r\n * hue format\r\n *\r\n * @param hue string\r\n *\r\n * @returns hus number\r\n */\r\nexport function hueUnit(hue) {\r\n    var res;\r\n    if (hue.indexOf('deg') > -1)\r\n        res = +hue.replace('deg', '');\r\n    else if (hue.indexOf('rad') > -1)\r\n        res = Math.round(+hue.replace('rad', '') * (180 / Math.PI));\r\n    else if (hue.indexOf('turn') > -1)\r\n        res = Math.round(+hue.replace('turn', '') * 360);\r\n    else\r\n        res = +hue;\r\n    return res;\r\n}\r\n/**\r\n * string RGB[A] to number {r, g, b, a}\r\n *\r\n * @param rgba string\r\n *\r\n * @returns RGBA\r\n */\r\nexport function formatRGBAToNum(rgba) {\r\n    var reg = /\\((.+?)\\)/g;\r\n    var red, green, blue, alpha;\r\n    if (reg.test(rgba)) {\r\n        var rgba_1 = RegExp.$1;\r\n        var sep = rgba_1.indexOf(\",\") > -1 ? \",\" : \" \";\r\n        var rgbaList = rgba_1.split(sep);\r\n        if (rgbaList.indexOf(\"/\") > -1)\r\n            rgbaList.splice(3, 1);\r\n        red = computeRGB(rgbaList[0]);\r\n        green = computeRGB(rgbaList[1]);\r\n        blue = computeRGB(rgbaList[2]);\r\n        if (rgbaList[3]) {\r\n            alpha = Math.round(computeAlpha(rgbaList[3]));\r\n        }\r\n    }\r\n    return { red: red, green: green, blue: blue, alpha: alpha };\r\n}\r\nexport function computeRGB(str) {\r\n    return str.indexOf(\"%\") > -1 ? +str.replace('%', '') / 100 * 255 : +str;\r\n}\r\nexport function computeAlpha(alpha) {\r\n    return alpha.indexOf(\"%\") > -1 ? +alpha.replace('%', '') / 100 * 255 : +alpha * 255;\r\n}\r\n/**\r\n * string HSL[A] to number {h, s, l, a}\r\n * @param hsla string\r\n *\r\n * @returns HSALA\r\n */\r\nexport function formatHSLAToNum(hsla) {\r\n    var reg = /\\((.+?)\\)/g;\r\n    var hue, saturation, lightness, alpha;\r\n    if (reg.test(hsla)) {\r\n        var hsla_1 = RegExp.$1;\r\n        var sep = hsla_1.indexOf(\",\") > -1 ? \",\" : \" \";\r\n        var hslaList = hsla_1.split(sep);\r\n        if (hslaList.indexOf(\"/\") > -1)\r\n            hslaList.splice(3, 1);\r\n        hue = hueUnit(hslaList[0]);\r\n        saturation = (+hslaList[1].replace('%', '')) / 100;\r\n        lightness = (+hslaList[2].replace('%', '')) / 100;\r\n        if (hslaList[3])\r\n            alpha = computeAlpha(hslaList[3]) / 255;\r\n    }\r\n    return { hue: hue, saturation: saturation, lightness: lightness, alpha: alpha };\r\n}\r\n","references":[],"dts":{"name":"/Users/sylvenas/Documents/github/color-transfer/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * hue format\r\n *\r\n * @param hue string\r\n *\r\n * @returns hus number\r\n */\r\nexport declare function hueUnit(hue: string): number;\r\ninterface RGBA {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n    alpha?: number;\r\n}\r\n/**\r\n * string RGB[A] to number {r, g, b, a}\r\n *\r\n * @param rgba string\r\n *\r\n * @returns RGBA\r\n */\r\nexport declare function formatRGBAToNum(rgba: string): RGBA;\r\nexport declare function computeRGB(str: string): number;\r\nexport declare function computeAlpha(alpha: string): number;\r\ninterface HSLA {\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    alpha?: number;\r\n}\r\n/**\r\n * string HSL[A] to number {h, s, l, a}\r\n * @param hsla string\r\n *\r\n * @returns HSALA\r\n */\r\nexport declare function formatHSLAToNum(hsla: string): HSLA;\r\nexport {};\r\n"}}
